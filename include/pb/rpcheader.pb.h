// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcheader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpcheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpcheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpcheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpcheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpcheader_2eproto;
namespace faster {
class RpcHeader;
struct RpcHeaderDefaultTypeInternal;
extern RpcHeaderDefaultTypeInternal _RpcHeader_default_instance_;
class RpcResponseHeader;
struct RpcResponseHeaderDefaultTypeInternal;
extern RpcResponseHeaderDefaultTypeInternal _RpcResponseHeader_default_instance_;
}  // namespace faster
PROTOBUF_NAMESPACE_OPEN
template<> ::faster::RpcHeader* Arena::CreateMaybeMessage<::faster::RpcHeader>(Arena*);
template<> ::faster::RpcResponseHeader* Arena::CreateMaybeMessage<::faster::RpcResponseHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace faster {

enum RpcResponseHeader_Type : int {
  RpcResponseHeader_Type_RESPONSE = 0,
  RpcResponseHeader_Type_PUSHMSGS = 1,
  RpcResponseHeader_Type_RpcResponseHeader_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RpcResponseHeader_Type_RpcResponseHeader_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RpcResponseHeader_Type_IsValid(int value);
constexpr RpcResponseHeader_Type RpcResponseHeader_Type_Type_MIN = RpcResponseHeader_Type_RESPONSE;
constexpr RpcResponseHeader_Type RpcResponseHeader_Type_Type_MAX = RpcResponseHeader_Type_PUSHMSGS;
constexpr int RpcResponseHeader_Type_Type_ARRAYSIZE = RpcResponseHeader_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcResponseHeader_Type_descriptor();
template<typename T>
inline const std::string& RpcResponseHeader_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcResponseHeader_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcResponseHeader_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcResponseHeader_Type_descriptor(), enum_t_value);
}
inline bool RpcResponseHeader_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcResponseHeader_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcResponseHeader_Type>(
    RpcResponseHeader_Type_descriptor(), name, value);
}
// ===================================================================

class RpcHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faster.RpcHeader) */ {
 public:
  inline RpcHeader() : RpcHeader(nullptr) {}
  ~RpcHeader() override;
  explicit constexpr RpcHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcHeader(const RpcHeader& from);
  RpcHeader(RpcHeader&& from) noexcept
    : RpcHeader() {
    *this = ::std::move(from);
  }

  inline RpcHeader& operator=(const RpcHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcHeader& operator=(RpcHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcHeader* internal_default_instance() {
    return reinterpret_cast<const RpcHeader*>(
               &_RpcHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcHeader& a, RpcHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faster.RpcHeader";
  }
  protected:
  explicit RpcHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kArgsSizeFieldNumber = 3,
  };
  // bytes service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // bytes method_name = 2;
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // uint32 args_size = 3;
  void clear_args_size();
  uint32_t args_size() const;
  void set_args_size(uint32_t value);
  private:
  uint32_t _internal_args_size() const;
  void _internal_set_args_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:faster.RpcHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  uint32_t args_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpcheader_2eproto;
};
// -------------------------------------------------------------------

class RpcResponseHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faster.RpcResponseHeader) */ {
 public:
  inline RpcResponseHeader() : RpcResponseHeader(nullptr) {}
  ~RpcResponseHeader() override;
  explicit constexpr RpcResponseHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcResponseHeader(const RpcResponseHeader& from);
  RpcResponseHeader(RpcResponseHeader&& from) noexcept
    : RpcResponseHeader() {
    *this = ::std::move(from);
  }

  inline RpcResponseHeader& operator=(const RpcResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResponseHeader& operator=(RpcResponseHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcResponseHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcResponseHeader* internal_default_instance() {
    return reinterpret_cast<const RpcResponseHeader*>(
               &_RpcResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcResponseHeader& a, RpcResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcResponseHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcResponseHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcResponseHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcResponseHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcResponseHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResponseHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faster.RpcResponseHeader";
  }
  protected:
  explicit RpcResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RpcResponseHeader_Type Type;
  static constexpr Type RESPONSE =
    RpcResponseHeader_Type_RESPONSE;
  static constexpr Type PUSHMSGS =
    RpcResponseHeader_Type_PUSHMSGS;
  static inline bool Type_IsValid(int value) {
    return RpcResponseHeader_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    RpcResponseHeader_Type_Type_MIN;
  static constexpr Type Type_MAX =
    RpcResponseHeader_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    RpcResponseHeader_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return RpcResponseHeader_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return RpcResponseHeader_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return RpcResponseHeader_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDataSizeFieldNumber = 3,
  };
  // .faster.RpcResponseHeader.Type type = 1;
  void clear_type();
  ::faster::RpcResponseHeader_Type type() const;
  void set_type(::faster::RpcResponseHeader_Type value);
  private:
  ::faster::RpcResponseHeader_Type _internal_type() const;
  void _internal_set_type(::faster::RpcResponseHeader_Type value);
  public:

  // uint32 data_size = 3;
  void clear_data_size();
  uint32_t data_size() const;
  void set_data_size(uint32_t value);
  private:
  uint32_t _internal_data_size() const;
  void _internal_set_data_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:faster.RpcResponseHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  uint32_t data_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpcheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcHeader

// bytes service_name = 1;
inline void RpcHeader::clear_service_name() {
  service_name_.ClearToEmpty();
}
inline const std::string& RpcHeader::service_name() const {
  // @@protoc_insertion_point(field_get:faster.RpcHeader.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcHeader::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 service_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faster.RpcHeader.service_name)
}
inline std::string* RpcHeader::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:faster.RpcHeader.service_name)
  return _s;
}
inline const std::string& RpcHeader::_internal_service_name() const {
  return service_name_.Get();
}
inline void RpcHeader::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcHeader::_internal_mutable_service_name() {
  
  return service_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcHeader::release_service_name() {
  // @@protoc_insertion_point(field_release:faster.RpcHeader.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcHeader::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (service_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faster.RpcHeader.service_name)
}

// bytes method_name = 2;
inline void RpcHeader::clear_method_name() {
  method_name_.ClearToEmpty();
}
inline const std::string& RpcHeader::method_name() const {
  // @@protoc_insertion_point(field_get:faster.RpcHeader.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcHeader::set_method_name(ArgT0&& arg0, ArgT... args) {
 
 method_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faster.RpcHeader.method_name)
}
inline std::string* RpcHeader::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:faster.RpcHeader.method_name)
  return _s;
}
inline const std::string& RpcHeader::_internal_method_name() const {
  return method_name_.Get();
}
inline void RpcHeader::_internal_set_method_name(const std::string& value) {
  
  method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcHeader::_internal_mutable_method_name() {
  
  return method_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcHeader::release_method_name() {
  // @@protoc_insertion_point(field_release:faster.RpcHeader.method_name)
  return method_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcHeader::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faster.RpcHeader.method_name)
}

// uint32 args_size = 3;
inline void RpcHeader::clear_args_size() {
  args_size_ = 0u;
}
inline uint32_t RpcHeader::_internal_args_size() const {
  return args_size_;
}
inline uint32_t RpcHeader::args_size() const {
  // @@protoc_insertion_point(field_get:faster.RpcHeader.args_size)
  return _internal_args_size();
}
inline void RpcHeader::_internal_set_args_size(uint32_t value) {
  
  args_size_ = value;
}
inline void RpcHeader::set_args_size(uint32_t value) {
  _internal_set_args_size(value);
  // @@protoc_insertion_point(field_set:faster.RpcHeader.args_size)
}

// -------------------------------------------------------------------

// RpcResponseHeader

// .faster.RpcResponseHeader.Type type = 1;
inline void RpcResponseHeader::clear_type() {
  type_ = 0;
}
inline ::faster::RpcResponseHeader_Type RpcResponseHeader::_internal_type() const {
  return static_cast< ::faster::RpcResponseHeader_Type >(type_);
}
inline ::faster::RpcResponseHeader_Type RpcResponseHeader::type() const {
  // @@protoc_insertion_point(field_get:faster.RpcResponseHeader.type)
  return _internal_type();
}
inline void RpcResponseHeader::_internal_set_type(::faster::RpcResponseHeader_Type value) {
  
  type_ = value;
}
inline void RpcResponseHeader::set_type(::faster::RpcResponseHeader_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:faster.RpcResponseHeader.type)
}

// uint32 data_size = 3;
inline void RpcResponseHeader::clear_data_size() {
  data_size_ = 0u;
}
inline uint32_t RpcResponseHeader::_internal_data_size() const {
  return data_size_;
}
inline uint32_t RpcResponseHeader::data_size() const {
  // @@protoc_insertion_point(field_get:faster.RpcResponseHeader.data_size)
  return _internal_data_size();
}
inline void RpcResponseHeader::_internal_set_data_size(uint32_t value) {
  
  data_size_ = value;
}
inline void RpcResponseHeader::set_data_size(uint32_t value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:faster.RpcResponseHeader.data_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace faster

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::faster::RpcResponseHeader_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::faster::RpcResponseHeader_Type>() {
  return ::faster::RpcResponseHeader_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpcheader_2eproto
